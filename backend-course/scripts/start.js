'use strict';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

process.env.NODE_ENV = 'development';

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

const staticBackendUrl = {
  // local: 'http://localhost:4000/kmsdev2',
  local: 'http://localhost:4000/kms_qa8/',
  team1: 'https://catalyst-inv-api-team1-dev1.kms.bodhi-dev.io/kmsdev1/',
  team2: 'https://catalyst-inv-api-team2-dev1.kms.bodhi-dev.io/kmsdev2/',
  team3: 'https://catalyst-inv-api-team3-dev1.kms.bodhi-dev.io/kmsdev3/',
  team4: 'https://catalyst-inv-api-team4-dev1.kms.bodhi-dev.io/kmsdev4/',
  team5: 'https://catalyst-inv-api-team5-dev1.kms.bodhi-dev.io/kmsdev5/',
  team6: 'https://catalyst-inv-api-team6-dev1.kms.bodhi-dev.io/kmsdev6/',
  team7: 'https://catalyst-inv-api-team7-dev1.kms.bodhi-dev.io/kmsdev7/',
  team8: 'https://catalyst-inv-api-team8-dev1.kms.bodhi-dev.io/kmsdev8/',
  qa5: 'https://catalyst-inv-api-team5-qa1.kms.bodhi-qa.io/kms_qa5/',
  qa6a: 'https://catalyst-inv-api-team6-qa1.kms.bodhi-qa.io/kms_qa6a/',
  qa7: 'https://catalyst-inv-api-team7-qa1.kms.bodhi-qa.io/kms_qa7/',
  edi: 'https://catalyst-edi-api-teamedi-dev1.kms.bodhi-dev.io/kmsedi/',
};

const team = process.argv[2];
let backendUrl = '';
if (team && staticBackendUrl[team]) {
  backendUrl = `?service=${staticBackendUrl[team]}`;
}

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(`${urls.localUrlForBrowser}${backendUrl}`);
    });

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
