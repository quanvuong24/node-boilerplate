Package:
Auto Close Tag
Auto Rename Tag
Beautify
Color Picker
ESLint
Flow Language Support
HTML CSS Support
HTML Snippets
IntelliSense
for CSS class names in HTML
JavaScript(ES6) code snippets
Latest TypeScript and Javascript Grammar
Node.js Modules Intellisense
One Dark Pro
Path Intellisense
Prettier - Code formatter
React Native Tools
Reactjs code snippets
TSLint
VSCode Great Icons
StandardJS - JavaScript Standard Style
Better Comments


Custom Keymap:
Shift + Alt + A Toggle block comment => Ctrl + Shift + /
editor.action.joinLines => Alt + leftArrow
beautify selection => Ctrl + Alt + B
Copy line up => Ctrl + D

Config

{
    "workbench.iconTheme": "vscode-great-icons",
    "editor.minimap.enabled": true,
    "editor.tabSize": 2,
    "editor.wordWrap": "on",
    "editor.fontSize": 16,
    "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
    "workbench.colorTheme": "One Dark Pro Vivid",
    "editor.multiCursorModifier": "ctrlCmd",
    "javascript.validate.enable": false,
    "eslint.autoFixOnSave": false,
    "html.format.wrapLineLength": 0,
    "standard.autoFixOnSave": true,
    "prettier.useTabs": true,
    "editor.detectIndentation": false,
    "editor.fontFamily": "'Fira Code'",
    "editor.fontLigatures": true,
}

Snipper
    "Description about code": {
        "prefix": "notice",
        "body": [
            "/**",
            " * @Description: $1",
            " */"
        ],
        "description": "Infomation about date, author, result"
    }





process.stdin.resume();
process.stdin.setEncoding("ascii");
var input = "";
process.stdin.on("data", function (chunk) {
    input += chunk;
});

const validate = (arr) => {
  let isNumber = true;
  const convertToInt = arr.map((item) => {
      if (isNaN(parseInt(item))) {
          isNumber = false;
          return null;
      }
      return parseInt(item);
  });
  return {money: convertToInt, isNumber};
}

process.stdin.on("end", function () {
  let results;
  const days = input.split(',');
  const { money, isNumber } = validate(days);
  if (!isNumber) {
      results = 0;
  } else {
      results = money.reduce((total, item) => {
        const checkMoney = total + item;
        if (Math.sign(item) === -1 && Math.sign(checkMoney) === -1) {
          return 0;
      }
      return total + item;
      }, 0);
  }
  process.stdout.write(""+results+"\n");
});


process.stdin.resume();
process.stdin.setEncoding("ascii");
var input = "";
process.stdin.on("data", function (chunk) {
    input += chunk;
});
process.stdin.on("end", function () {
    // now we can read/parse input
     const arr = input.split('\n');
     const k = parseInt(arr.splice(arr.length - 1, 1)[0]);
     const arrStore = arr.reduce((array, item) => {
            const store = item.split(',');
            return [...array, ...store];
    }, []);
     const sortArr = arrStore.map((store) => {
      return parseInt(store.split(':')[0]);
    });
    const position = bubbleSort(sortArr).find((_, index) => index === k);
    const results = arrStore.find((store) => {
        const number = parseInt(store.split(':')[0]); 
        return number === position;
    });
     process.stdout.write(""+results+"\n");
});

function bubbleSort(arr){
   var len = arr.length;
   for (var i = len-1; i>=0; i--){
     for(var j = 1; j<=i; j++){
       if(arr[j-1]>arr[j]){
           var temp = arr[j-1];
           arr[j-1] = arr[j];
           arr[j] = temp;
        }
     }
   }
   return arr;
}